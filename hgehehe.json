{
  "judul_kasus": "Kontrol Lampu Jalan Otomatis Menggunakan Logika Fuzzy Mamdani",
  "deskripsi_kasus": "Sistem ini bertujuan untuk mengatur tingkat daya (kecerahan) lampu jalan secara otomatis berdasarkan kondisi intensitas cahaya lingkungan yang terdeteksi dan waktu pada saat itu.",
  "kerangka_fuzzy_mamdani": {
    "1_variabel_input": [
      {
        "nama_variabel": "Intensitas Cahaya Sekitar",
        "unit_contoh": "lux",
        "rentang_nilai_contoh": "[0, 1000] lux",
        "himpunan_fuzzy": [
          {
            "nama_himpunan": "Gelap",
            "fungsi_keanggotaan_contoh": "Trapesium Kiri (misal: [0, 0, 100, 250] lux)"
          },
          {
            "nama_himpunan": "Redup",
            "fungsi_keanggotaan_contoh": "Segitiga (misal: [150, 300, 450] lux)"
          },
          {
            "nama_himpunan": "Terang",
            "fungsi_keanggotaan_contoh": "Trapesium Kanan (misal: [350, 500, 1000, 1000] lux)"
          }
        ]
      },
      {
        "nama_variabel": "Waktu",
        "unit_contoh": "Jam (format 24 jam)",
        "rentang_nilai_contoh": "[0, 24)",
        "himpunan_fuzzy": [
          {
            "nama_himpunan": "Malam",
            "fungsi_keanggotaan_contoh": "Kombinasi dua Trapesium (misal: dini hari [0, 0, 3, 5] dan larut malam [21, 22, 24, 24]), derajat keanggotaan adalah nilai MAX dari keduanya."
          },
          {
            "nama_himpunan": "Transisi",
            "fungsi_keanggotaan_contoh": "Kombinasi dua Segitiga (misal: pagi [4, 5.5, 7] dan sore [17, 18.5, 20]), derajat keanggotaan adalah nilai MAX dari keduanya."
          },
          {
            "nama_himpunan": "Siang",
            "fungsi_keanggotaan_contoh": "Trapesium (misal: [7, 9, 15, 17])"
          }
        ]
      }
    ],
    "2_variabel_output": {
      "nama_variabel": "Daya Lampu",
      "unit_contoh": "Persentase (%)",
      "rentang_nilai_contoh": "[0, 100] %",
      "himpunan_fuzzy": [
        {
          "nama_himpunan": "Mati",
          "fungsi_keanggotaan_contoh": "Trapesium Kiri (misal: [0, 0, 5, 15] %)"
        },
        {
          "nama_himpunan": "Redup",
          "fungsi_keanggotaan_contoh": "Segitiga (misal: [10, 30, 50] %)"
        },
        {
          "nama_himpunan": "Terang",
          "fungsi_keanggotaan_contoh": "Trapesium Kanan (misal: [40, 60, 100, 100] %)"
        }
      ]
    },
    "3_basis_aturan_fuzzy_contoh": [
      "IF Intensitas Cahaya Sekitar is Gelap AND Waktu is Malam THEN Daya Lampu is Terang",
      "IF Intensitas Cahaya Sekitar is Gelap AND Waktu is Transisi THEN Daya Lampu is Terang",
      "IF Intensitas Cahaya Sekitar is Gelap AND Waktu is Siang THEN Daya Lampu is Redup (kondisi cuaca sangat buruk/sensor error)",
      "IF Intensitas Cahaya Sekitar is Redup AND Waktu is Malam THEN Daya Lampu is Terang",
      "IF Intensitas Cahaya Sekitar is Redup AND Waktu is Transisi THEN Daya Lampu is Redup",
      "IF Intensitas Cahaya Sekitar is Redup AND Waktu is Siang THEN Daya Lampu is Mati",
      "IF Intensitas Cahaya Sekitar is Terang AND Waktu is Malam THEN Daya Lampu is Redup (asumsi ada sumber cahaya lain, namun tetap butuh visibilitas dasar)",
      "IF Intensitas Cahaya Sekitar is Terang AND Waktu is Transisi THEN Daya Lampu is Mati",
      "IF Intensitas Cahaya Sekitar is Terang AND Waktu is Siang THEN Daya Lampu is Mati"
    ],
    "4_tahapan_proses_fuzzy_mamdani": {
      "a_fuzzifikasi_input": "Mengubah nilai input crisp (misalnya, Intensitas Cahaya = 50 lux, Waktu = 22.00) menjadi derajat keanggotaan (nilai antara 0 dan 1) untuk setiap himpunan fuzzy dari masing-masing variabel input.",
      "b_aplikasi_fungsi_implikasi_evaluasi_aturan": "Untuk setiap aturan: 1. Hitung kekuatan aktivasi aturan (derajat kebenaran anteseden) menggunakan operator fuzzy AND (biasanya MIN). 2. Aplikasikan kekuatan ini pada konsekuen (himpunan fuzzy output) untuk mendapatkan himpunan fuzzy output terpotong (clipping) atau diskalakan (scaling) untuk setiap aturan. Metode Mamdani umumnya menggunakan clipping.",
      "c_komposisi_aturan_agregasi_output": "Menggabungkan semua himpunan fuzzy output hasil implikasi dari semua aturan yang aktif menjadi satu himpunan fuzzy tunggal untuk variabel output. Biasanya menggunakan operator fuzzy OR (biasanya MAX).",
      "d_defuzzifikasi_output": "Mengubah himpunan fuzzy agregat hasil komposisi menjadi satu nilai output crisp (misalnya, Daya Lampu = 90%). Metode yang umum digunakan adalah Centroid of Area (COA), Bisector, Mean of Maximum (MOM), Smallest of Maximum (SOM), atau Largest of Maximum (LOM). Metode COA sering digunakan untuk Mamdani."
    },
    "catatan_untuk_implementasi_tugas": {
      "perhitungan_manual": "Pilih satu set nilai input konkret (misal: Intensitas Cahaya = 200 lux, Waktu = 18.00). Lakukan perhitungan manual untuk setiap tahap (Fuzzifikasi, Implikasi per aturan, Agregasi, dan Defuzzifikasi) dengan detail, termasuk penggambaran fungsi keanggotaan dan area hasil agregasi jika menggunakan Centroid.",
      "rekomendasi_tool_python": "Untuk implementasi dengan Python, Anda dapat menggunakan library seperti 'scikit-fuzzy' (biasa disebut `skfuzzy`) yang menyediakan tool untuk membangun sistem inferensi fuzzy Mamdani dan Sugeno. Alternatif lain bisa `simpful` atau membangun fungsi-fungsi dasar secara manual.",
      "penyesuaian_parameter": "Nilai rentang, parameter fungsi keanggotaan, dan aturan yang diberikan di atas adalah contoh. Anda perlu mendefinisikan nilai-nilai ini secara lebih spesifik dan logis sesuai dengan pemahaman Anda tentang kasus dan hasil yang diharapkan."
    }
  }
}
